feat: Refatoração completa dos relatórios para uso de dados reais

Esta refatoração remove todos os dados mocados dos componentes de relatório, substituindo-os por chamadas de API reais e centralizando o gerenciamento de estado no `reportStore`.

Principais mudanças:

- **Centralização no `reportStore`**: O `reportStore` agora é a única fonte da verdade para todos os dados de relatórios. A action `fetchReports` foi aprimorada para buscar um objeto consolidado (`ReportData`) que contém os dados para todos os relatórios, simplificando o carregamento de dados.

- **Remoção de Mocks**: Todos os dados estáticos e `TODOs` para chamadas de API foram removidos dos componentes de relatório individuais (`AccountsPayable`, `BalanceSheet`, `CashFlow`, `IncomeStatement`, `TrialBalance`, etc.).

- **Componentes Reativos**: Os componentes de relatório agora são puramente reativos. Eles recebem os dados necessários como `props` (indiretamente, via `computed properties` do `reportStore`) e não possuem mais lógica de busca de dados (`onMounted`, `fetch...Data`).

- **Correção de Tipos**: Foram introduzidos tipos específicos para cada relatório (`AccountsPayable`, `BalanceSheet`, etc.) no novo arquivo `frontend/src/types/reports.ts`, garantindo a segurança de tipos de ponta a ponta.

- **Correção de Erros de Build e Lint**: Foram corrigidos diversos erros de tipo do TypeScript e de lint que surgiram durante a refatoração, garantindo que o código esteja limpo e a aplicação seja compilada com sucesso.

- **Limpeza de Código**: Variáveis e importações não utilizadas foram removidas, e o código foi formatado para manter a consistência.

Essa mudança melhora significativamente a arquitetura do frontend, tornando-a mais robusta, manutenível e pronta para exibir dados dinâmicos da API.