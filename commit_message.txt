feat: Implement tax variations and NCM integration

This commit introduces significant improvements to the tax calculation system:

- **NCM Integration:**
  - Added `ncm` column to the `products` table in the database.
  - Updated backend schemas, handlers, and services to support NCM for products.
  - Modified `taxService.ts` to allow NCM to influence tax calculations (e.g., IPI rates).
  - Integrated NCM field into frontend product forms and product display.

- **State/Municipal Tax Variations:**
  - Created `tax_rules` table in the database to store tax rates based on origin/destination UF and NCM.
  - Implemented full CRUD operations for `tax_rules` in the backend (handler and service).
  - Developed a new "Tax Rules" section in the frontend settings for managing these rules.
  - Updated `taxService.ts` to dynamically fetch and apply tax rates from `tax_rules` based on transaction details (UF origin/destination, NCM).
  - Added `uf_origin` and `uf_destination` columns to `entry_lines` table.

- **Database Migrations:**
  - Created new migrations for `add_ncm_to_products`, `create_tax_rules_and_add_uf_columns`, `create_moddatetime_function`, and `create_check_user_organization_access_function`.
  - Ensured correct migration order by adjusting timestamps and handling `IF NOT EXISTS` clauses.

- **Bug Fixes & Refinements:**
  - Addressed TypeScript compilation errors in `entry-lines.ts` and `tax-calculation.ts` related to `calculateTaxes` becoming asynchronous and requiring `organization_id` and `token`.
  - Corrected linting errors in frontend and backend.